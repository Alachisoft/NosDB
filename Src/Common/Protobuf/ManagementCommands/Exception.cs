// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

<<<<<<< Updated upstream
// Generated from: Exception.proto
namespace Alachisoft.NosDB.Common.Protobuf.ManagementCommands
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"Exception")]
  public partial class Exception : global::ProtoBuf.IExtensible
  {
    public Exception() {}
    

    private Alachisoft.NosDB.Common.Protobuf.ManagementCommands.Exception.Type _type = Alachisoft.NosDB.Common.Protobuf.ManagementCommands.Exception.Type.OPERATIONFAILED;
    [global::ProtoBuf.ProtoMember(1, IsRequired = false, Name=@"type", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(Alachisoft.NosDB.Common.Protobuf.ManagementCommands.Exception.Type.OPERATIONFAILED)]
    public Alachisoft.NosDB.Common.Protobuf.ManagementCommands.Exception.Type type
    {
      get { return _type; }
      set { _type = value; }
=======
using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Alachisoft.NoSDB.Common.Protobuf.ManagementCommands {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Exception {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_Exception__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception, global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Builder> internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_Exception__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Exception() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "Cg9FeGNlcHRpb24ucHJvdG8SM0FsYWNoaXNvZnQuTm9TREIuQ29tbW9uLlBy", 
              "b3RvYnVmLk1hbmFnZW1lbnRDb21tYW5kcyLTAwoJRXhjZXB0aW9uElEKBHR5", 
              "cGUYASABKA4yQy5BbGFjaGlzb2Z0Lk5vU0RCLkNvbW1vbi5Qcm90b2J1Zi5N", 
              "YW5hZ2VtZW50Q29tbWFuZHMuRXhjZXB0aW9uLlR5cGUSDwoHbWVzc2FnZRgC", 
              "IAEoCRIRCglleGNlcHRpb24YAyABKAkizgIKBFR5cGUSEwoPT1BFUkFUSU9O", 
              "RkFJTEVEEAASDQoJQUdHUkVHQVRFEAESEQoNQ09ORklHVVJBVElPThACEhIK", 
              "DkdFTkVSQUxGQUlMVVJFEAMSDAoIU0VDVVJJVFkQBBIQCgxOT1RTVVBQT1JU", 
              "RUQQBRIXChNNQVhfQ0xJRU5UU19SRUFDSEVEEAYSGQoVU1RSRUFNX0FMUkVB", 
              "RFlfTE9DS0VEEAcSEQoNU1RSRUFNX0NMT1NFRBAIEg4KClNUUkVBTV9FWEMQ", 
              "CRIXChNTVFJFQU1fSU5WQUxJRF9MT0NLEAoSFAoQU1RSRUFNX05PVF9GT1VO", 
              "RBALEhgKFFRZUEVfSU5ERVhfTk9UX0ZPVU5EEAwSHQoZQVRUUklCVVRFX0lO", 
              "REVYX05PVF9GT1VORBANEhwKGFNUQVRFX1RSQU5TRkVSX0VYQ0VQVElPThAO", 
              "QjkKJGNvbS5hbGFjaGlzb2Z0Lm5vc2RiLmNvbW1vbi5wcm90b2J1ZkIRRXhj", 
            "ZXB0aW9uUHJvdG9jb2w="));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_Exception__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_Exception__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception, global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Builder>(internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_Exception__Descriptor,
                  new string[] { "Type", "Message", "Exception_", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
>>>>>>> Stashed changes
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Exception : pb::GeneratedMessage<Exception, Exception.Builder> {
    private Exception() { }
    private static readonly Exception defaultInstance = new Exception().MakeReadOnly();
    private static readonly string[] _exceptionFieldNames = new string[] { "exception", "message", "type" };
    private static readonly uint[] _exceptionFieldTags = new uint[] { 26, 18, 8 };
    public static Exception DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Exception DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Exception ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.Exception.internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_Exception__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Exception, Exception.Builder> InternalFieldAccessors {
      get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.Exception.internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_Exception__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        OPERATIONFAILED = 0,
        AGGREGATE = 1,
        CONFIGURATION = 2,
        GENERALFAILURE = 3,
        SECURITY = 4,
        NOTSUPPORTED = 5,
        MAX_CLIENTS_REACHED = 6,
        STREAM_ALREADY_LOCKED = 7,
        STREAM_CLOSED = 8,
        STREAM_EXC = 9,
        STREAM_INVALID_LOCK = 10,
        STREAM_NOT_FOUND = 11,
        TYPE_INDEX_NOT_FOUND = 12,
        ATTRIBUTE_INDEX_NOT_FOUND = 13,
        STATE_TRANSFER_EXCEPTION = 14,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Types.Type type_ = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Types.Type.OPERATIONFAILED;
    public bool HasType {
      get { return hasType; }
    }
    public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Types.Type Type {
      get { return type_; }
    }
    
    public const int MessageFieldNumber = 2;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public const int Exception_FieldNumber = 3;
    private bool hasException_;
    private string exception_ = "";
    public bool HasException_ {
      get { return hasException_; }
    }
    public string Exception_ {
      get { return exception_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _exceptionFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[2], (int) Type, Type);
      }
      if (hasMessage) {
        output.WriteString(2, field_names[1], Message);
      }
      if (hasException_) {
        output.WriteString(3, field_names[0], Exception_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Message);
      }
      if (hasException_) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Exception_);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Exception ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Exception ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Exception ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Exception ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Exception ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Exception ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Exception ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Exception ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Exception ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Exception ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Exception MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Exception prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Exception, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Exception cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Exception result;
      
      private Exception PrepareBuilder() {
        if (resultIsReadOnly) {
          Exception original = result;
          result = new Exception();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Exception MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Descriptor; }
      }
      
      public override Exception DefaultInstanceForType {
        get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.DefaultInstance; }
      }
      
      public override Exception BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Exception) {
          return MergeFrom((Exception) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Exception other) {
        if (other == global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        if (other.HasException_) {
          Exception_ = other.Exception_;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_exceptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _exceptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
            case 26: {
              result.hasException_ = input.ReadString(ref result.exception_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Types.Type.OPERATIONFAILED;
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
      
      public bool HasException_ {
        get { return result.hasException_; }
      }
      public string Exception_ {
        get { return result.Exception_; }
        set { SetException_(value); }
      }
      public Builder SetException_(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasException_ = true;
        result.exception_ = value;
        return this;
      }
      public Builder ClearException_() {
        PrepareBuilder();
        result.hasException_ = false;
        result.exception_ = "";
        return this;
      }
    }
    static Exception() {
      object.ReferenceEquals(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.Exception.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
