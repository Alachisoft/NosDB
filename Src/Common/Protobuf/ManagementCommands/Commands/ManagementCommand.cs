// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

<<<<<<< Updated upstream
// Generated from: ManagementCommand.proto
namespace Alachisoft.NosDB.Common.Protobuf.ManagementCommands
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"ManagementCommand")]
  public partial class ManagementCommand : global::ProtoBuf.IExtensible
  {
    public ManagementCommand() {}
=======
using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Alachisoft.NoSDB.Common.Protobuf.ManagementCommands {
  
  namespace Proto {
>>>>>>> Stashed changes
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class ManagementCommand {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementCommand__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand, global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Builder> internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementCommand__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ManagementCommand() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChdNYW5hZ2VtZW50Q29tbWFuZC5wcm90bxIzQWxhY2hpc29mdC5Ob1NEQi5D", 
              "b21tb24uUHJvdG9idWYuTWFuYWdlbWVudENvbW1hbmRzIqMCChFNYW5hZ2Vt", 
              "ZW50Q29tbWFuZBIRCglyZXF1ZXN0SWQYASABKAMSGQoOY29tbWFuZFZlcnNp", 
              "b24YAiABKAU6ATASEgoKbWV0aG9kTmFtZRgDIAEoCRIQCghvdmVybG9hZBgE", 
              "IAEoBRIRCglhcmd1bWVudHMYBSABKAwSEgoKb2JqZWN0TmFtZRgGIAEoCRJh", 
              "CgZzb3VyY2UYByABKA4yUS5BbGFjaGlzb2Z0Lk5vU0RCLkNvbW1vbi5Qcm90", 
              "b2J1Zi5NYW5hZ2VtZW50Q29tbWFuZHMuTWFuYWdlbWVudENvbW1hbmQuU291", 
              "cmNlVHlwZSIwCgpTb3VyY2VUeXBlEgoKBkNMSUVOVBABEgkKBVNIQVJEEAIS", 
              "CwoHTU9OSVRPUhADQkMKJGNvbS5hbGFjaGlzb2Z0Lm5vc2RiLmNvbW1vbi5w", 
            "cm90b2J1ZkIbTkNNYW5hZ2VtZW50Q29tbWFuZFByb3RvY29s"));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementCommand__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementCommand__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand, global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Builder>(internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementCommand__Descriptor,
                  new string[] { "RequestId", "CommandVersion", "MethodName", "Overload", "Arguments", "ObjectName", "Source", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ManagementCommand : pb::GeneratedMessage<ManagementCommand, ManagementCommand.Builder> {
    private ManagementCommand() { }
    private static readonly ManagementCommand defaultInstance = new ManagementCommand().MakeReadOnly();
    private static readonly string[] _managementCommandFieldNames = new string[] { "arguments", "commandVersion", "methodName", "objectName", "overload", "requestId", "source" };
    private static readonly uint[] _managementCommandFieldTags = new uint[] { 42, 16, 26, 50, 32, 8, 56 };
    public static ManagementCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ManagementCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ManagementCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.ManagementCommand.internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ManagementCommand, ManagementCommand.Builder> InternalFieldAccessors {
      get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.ManagementCommand.internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementCommand__FieldAccessorTable; }
    }
<<<<<<< Updated upstream

    private Alachisoft.NosDB.Common.Protobuf.ManagementCommands.ManagementCommand.SourceType _source = Alachisoft.NosDB.Common.Protobuf.ManagementCommands.ManagementCommand.SourceType.CLIENT;
    [global::ProtoBuf.ProtoMember(7, IsRequired = false, Name=@"source", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(Alachisoft.NosDB.Common.Protobuf.ManagementCommands.ManagementCommand.SourceType.CLIENT)]
    public Alachisoft.NosDB.Common.Protobuf.ManagementCommands.ManagementCommand.SourceType source
    {
      get { return _source; }
      set { _source = value; }
    }
    [global::ProtoBuf.ProtoContract(Name=@"SourceType")]
    public enum SourceType
    {
            
      [global::ProtoBuf.ProtoEnum(Name=@"CLIENT", Value=1)]
      CLIENT = 1,
            
      [global::ProtoBuf.ProtoEnum(Name=@"SHARD", Value=2)]
      SHARD = 2,
            
      [global::ProtoBuf.ProtoEnum(Name=@"MONITOR", Value=3)]
      MONITOR = 3
=======
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum SourceType {
        CLIENT = 1,
        SHARD = 2,
        MONITOR = 3,
      }
      
    }
    #endregion
    
    public const int RequestIdFieldNumber = 1;
    private bool hasRequestId;
    private long requestId_;
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public long RequestId {
      get { return requestId_; }
    }
    
    public const int CommandVersionFieldNumber = 2;
    private bool hasCommandVersion;
    private int commandVersion_;
    public bool HasCommandVersion {
      get { return hasCommandVersion; }
    }
    public int CommandVersion {
      get { return commandVersion_; }
    }
    
    public const int MethodNameFieldNumber = 3;
    private bool hasMethodName;
    private string methodName_ = "";
    public bool HasMethodName {
      get { return hasMethodName; }
    }
    public string MethodName {
      get { return methodName_; }
    }
    
    public const int OverloadFieldNumber = 4;
    private bool hasOverload;
    private int overload_;
    public bool HasOverload {
      get { return hasOverload; }
    }
    public int Overload {
      get { return overload_; }
    }
    
    public const int ArgumentsFieldNumber = 5;
    private bool hasArguments;
    private pb::ByteString arguments_ = pb::ByteString.Empty;
    public bool HasArguments {
      get { return hasArguments; }
    }
    public pb::ByteString Arguments {
      get { return arguments_; }
    }
    
    public const int ObjectNameFieldNumber = 6;
    private bool hasObjectName;
    private string objectName_ = "";
    public bool HasObjectName {
      get { return hasObjectName; }
    }
    public string ObjectName {
      get { return objectName_; }
    }
    
    public const int SourceFieldNumber = 7;
    private bool hasSource;
    private global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Types.SourceType source_ = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Types.SourceType.CLIENT;
    public bool HasSource {
      get { return hasSource; }
    }
    public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Types.SourceType Source {
      get { return source_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _managementCommandFieldNames;
      if (hasRequestId) {
        output.WriteInt64(1, field_names[5], RequestId);
      }
      if (hasCommandVersion) {
        output.WriteInt32(2, field_names[1], CommandVersion);
      }
      if (hasMethodName) {
        output.WriteString(3, field_names[2], MethodName);
      }
      if (hasOverload) {
        output.WriteInt32(4, field_names[4], Overload);
      }
      if (hasArguments) {
        output.WriteBytes(5, field_names[0], Arguments);
      }
      if (hasObjectName) {
        output.WriteString(6, field_names[3], ObjectName);
      }
      if (hasSource) {
        output.WriteEnum(7, field_names[6], (int) Source, Source);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, RequestId);
      }
      if (hasCommandVersion) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CommandVersion);
      }
      if (hasMethodName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, MethodName);
      }
      if (hasOverload) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Overload);
      }
      if (hasArguments) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, Arguments);
      }
      if (hasObjectName) {
        size += pb::CodedOutputStream.ComputeStringSize(6, ObjectName);
      }
      if (hasSource) {
        size += pb::CodedOutputStream.ComputeEnumSize(7, (int) Source);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ManagementCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ManagementCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ManagementCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ManagementCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ManagementCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ManagementCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ManagementCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ManagementCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ManagementCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ManagementCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ManagementCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ManagementCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ManagementCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ManagementCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ManagementCommand result;
      
      private ManagementCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          ManagementCommand original = result;
          result = new ManagementCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ManagementCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Descriptor; }
      }
      
      public override ManagementCommand DefaultInstanceForType {
        get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.DefaultInstance; }
      }
      
      public override ManagementCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ManagementCommand) {
          return MergeFrom((ManagementCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ManagementCommand other) {
        if (other == global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasCommandVersion) {
          CommandVersion = other.CommandVersion;
        }
        if (other.HasMethodName) {
          MethodName = other.MethodName;
        }
        if (other.HasOverload) {
          Overload = other.Overload;
        }
        if (other.HasArguments) {
          Arguments = other.Arguments;
        }
        if (other.HasObjectName) {
          ObjectName = other.ObjectName;
        }
        if (other.HasSource) {
          Source = other.Source;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_managementCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _managementCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRequestId = input.ReadInt64(ref result.requestId_);
              break;
            }
            case 16: {
              result.hasCommandVersion = input.ReadInt32(ref result.commandVersion_);
              break;
            }
            case 26: {
              result.hasMethodName = input.ReadString(ref result.methodName_);
              break;
            }
            case 32: {
              result.hasOverload = input.ReadInt32(ref result.overload_);
              break;
            }
            case 42: {
              result.hasArguments = input.ReadBytes(ref result.arguments_);
              break;
            }
            case 50: {
              result.hasObjectName = input.ReadString(ref result.objectName_);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.source_, out unknown)) {
                result.hasSource = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRequestId {
        get { return result.hasRequestId; }
      }
      public long RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(long value) {
        PrepareBuilder();
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        PrepareBuilder();
        result.hasRequestId = false;
        result.requestId_ = 0L;
        return this;
      }
      
      public bool HasCommandVersion {
        get { return result.hasCommandVersion; }
      }
      public int CommandVersion {
        get { return result.CommandVersion; }
        set { SetCommandVersion(value); }
      }
      public Builder SetCommandVersion(int value) {
        PrepareBuilder();
        result.hasCommandVersion = true;
        result.commandVersion_ = value;
        return this;
      }
      public Builder ClearCommandVersion() {
        PrepareBuilder();
        result.hasCommandVersion = false;
        result.commandVersion_ = 0;
        return this;
      }
      
      public bool HasMethodName {
        get { return result.hasMethodName; }
      }
      public string MethodName {
        get { return result.MethodName; }
        set { SetMethodName(value); }
      }
      public Builder SetMethodName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethodName = true;
        result.methodName_ = value;
        return this;
      }
      public Builder ClearMethodName() {
        PrepareBuilder();
        result.hasMethodName = false;
        result.methodName_ = "";
        return this;
      }
      
      public bool HasOverload {
        get { return result.hasOverload; }
      }
      public int Overload {
        get { return result.Overload; }
        set { SetOverload(value); }
      }
      public Builder SetOverload(int value) {
        PrepareBuilder();
        result.hasOverload = true;
        result.overload_ = value;
        return this;
      }
      public Builder ClearOverload() {
        PrepareBuilder();
        result.hasOverload = false;
        result.overload_ = 0;
        return this;
      }
      
      public bool HasArguments {
        get { return result.hasArguments; }
      }
      public pb::ByteString Arguments {
        get { return result.Arguments; }
        set { SetArguments(value); }
      }
      public Builder SetArguments(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArguments = true;
        result.arguments_ = value;
        return this;
      }
      public Builder ClearArguments() {
        PrepareBuilder();
        result.hasArguments = false;
        result.arguments_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasObjectName {
        get { return result.hasObjectName; }
      }
      public string ObjectName {
        get { return result.ObjectName; }
        set { SetObjectName(value); }
      }
      public Builder SetObjectName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasObjectName = true;
        result.objectName_ = value;
        return this;
      }
      public Builder ClearObjectName() {
        PrepareBuilder();
        result.hasObjectName = false;
        result.objectName_ = "";
        return this;
      }
      
      public bool HasSource {
       get { return result.hasSource; }
      }
      public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Types.SourceType Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Types.SourceType value) {
        PrepareBuilder();
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder ClearSource() {
        PrepareBuilder();
        result.hasSource = false;
        result.source_ = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Types.SourceType.CLIENT;
        return this;
      }
    }
    static ManagementCommand() {
      object.ReferenceEquals(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.ManagementCommand.Descriptor, null);
>>>>>>> Stashed changes
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
