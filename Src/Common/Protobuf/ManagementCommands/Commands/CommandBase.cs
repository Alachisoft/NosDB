// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

<<<<<<< Updated upstream
// Generated from: CommandBase.proto
// Note: requires additional types generated from: ManagementCommand.proto
// Note: requires additional types generated from: ManagementResponse.proto
namespace Alachisoft.NosDB.Common.Protobuf.ManagementCommands
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"CommandBase")]
  public partial class CommandBase : global::ProtoBuf.IExtensible
  {
    public CommandBase() {}
=======
using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Alachisoft.NoSDB.Common.Protobuf.ManagementCommands {
  
  namespace Proto {
>>>>>>> Stashed changes
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class CommandBase {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_CommandBase__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase, global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.Builder> internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_CommandBase__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static CommandBase() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChFDb21tYW5kQmFzZS5wcm90bxIzQWxhY2hpc29mdC5Ob1NEQi5Db21tb24u", 
              "UHJvdG9idWYuTWFuYWdlbWVudENvbW1hbmRzGhdNYW5hZ2VtZW50Q29tbWFu", 
              "ZC5wcm90bxoYTWFuYWdlbWVudFJlc3BvbnNlLnByb3RvIuECCgtDb21tYW5k", 
              "QmFzZRIRCglyZXF1ZXN0SWQYASABKAMSVwoHY29tbWFuZBgCIAEoCzJGLkFs", 
              "YWNoaXNvZnQuTm9TREIuQ29tbW9uLlByb3RvYnVmLk1hbmFnZW1lbnRDb21t", 
              "YW5kcy5NYW5hZ2VtZW50Q29tbWFuZBJZCghyZXNwb25zZRgDIAEoCzJHLkFs", 
              "YWNoaXNvZnQuTm9TREIuQ29tbW9uLlByb3RvYnVmLk1hbmFnZW1lbnRDb21t", 
              "YW5kcy5NYW5hZ2VtZW50UmVzcG9uc2USYQoLY29tbWFuZFR5cGUYBCABKA4y", 
              "TC5BbGFjaGlzb2Z0Lk5vU0RCLkNvbW1vbi5Qcm90b2J1Zi5NYW5hZ2VtZW50", 
              "Q29tbWFuZHMuQ29tbWFuZEJhc2UuQ29tbWFuZFR5cGUiKAoLQ29tbWFuZFR5", 
              "cGUSCwoHQ09NTUFORBABEgwKCFJFU1BPTlNFEAJCNwokY29tLmFsYWNoaXNv", 
            "ZnQubm9zZGIuY29tbW9uLnByb3RvYnVmQg9Db21tYW5kUHJvdG9jb2w="));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_CommandBase__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_CommandBase__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase, global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.Builder>(internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_CommandBase__Descriptor,
                  new string[] { "RequestId", "Command", "Response", "CommandType", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.ManagementCommand.Descriptor, 
            global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.ManagementResponse.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
<<<<<<< Updated upstream

    private Alachisoft.NosDB.Common.Protobuf.ManagementCommands.ManagementCommand _command = null;
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"command", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue(null)]
    public Alachisoft.NosDB.Common.Protobuf.ManagementCommands.ManagementCommand command
    {
      get { return _command; }
      set { _command = value; }
    }

    private Alachisoft.NosDB.Common.Protobuf.ManagementCommands.ManagementResponse _response = null;
    [global::ProtoBuf.ProtoMember(3, IsRequired = false, Name=@"response", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue(null)]
    public Alachisoft.NosDB.Common.Protobuf.ManagementCommands.ManagementResponse response
    {
      get { return _response; }
      set { _response = value; }
    }

    private Alachisoft.NosDB.Common.Protobuf.ManagementCommands.CommandBase.CommandType _commandType = Alachisoft.NosDB.Common.Protobuf.ManagementCommands.CommandBase.CommandType.COMMAND;
    [global::ProtoBuf.ProtoMember(4, IsRequired = false, Name=@"commandType", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(Alachisoft.NosDB.Common.Protobuf.ManagementCommands.CommandBase.CommandType.COMMAND)]
    public Alachisoft.NosDB.Common.Protobuf.ManagementCommands.CommandBase.CommandType commandType
    {
      get { return _commandType; }
      set { _commandType = value; }
    }
    [global::ProtoBuf.ProtoContract(Name=@"CommandType")]
    public enum CommandType
    {
            
      [global::ProtoBuf.ProtoEnum(Name=@"COMMAND", Value=1)]
      COMMAND = 1,
            
      [global::ProtoBuf.ProtoEnum(Name=@"RESPONSE", Value=2)]
      RESPONSE = 2
=======
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandBase : pb::GeneratedMessage<CommandBase, CommandBase.Builder> {
    private CommandBase() { }
    private static readonly CommandBase defaultInstance = new CommandBase().MakeReadOnly();
    private static readonly string[] _commandBaseFieldNames = new string[] { "command", "commandType", "requestId", "response" };
    private static readonly uint[] _commandBaseFieldTags = new uint[] { 18, 32, 8, 26 };
    public static CommandBase DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CommandBase DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CommandBase ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.CommandBase.internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_CommandBase__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CommandBase, CommandBase.Builder> InternalFieldAccessors {
      get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.CommandBase.internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_CommandBase__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CommandType {
        COMMAND = 1,
        RESPONSE = 2,
      }
      
    }
    #endregion
    
    public const int RequestIdFieldNumber = 1;
    private bool hasRequestId;
    private long requestId_;
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public long RequestId {
      get { return requestId_; }
        set { requestId_ = value; }
    }
    
    public const int CommandFieldNumber = 2;
    private bool hasCommand;
    private global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand command_;
    public bool HasCommand {
      get { return hasCommand; }
    }
    public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand Command {
      get { return command_ ?? global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.DefaultInstance; }
    }
    
    public const int ResponseFieldNumber = 3;
    private bool hasResponse;
    private global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse response_;
    public bool HasResponse {
      get { return hasResponse; }
    }
    public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse Response {
      get { return response_ ?? global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.DefaultInstance; }
    }
    
    public const int CommandTypeFieldNumber = 4;
    private bool hasCommandType;
    private global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.Types.CommandType commandType_ = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.Types.CommandType.COMMAND;
    public bool HasCommandType {
      get { return hasCommandType; }
    }
    public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.Types.CommandType CommandType {
      get { return commandType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _commandBaseFieldNames;
      if (hasRequestId) {
        output.WriteInt64(1, field_names[2], RequestId);
      }
      if (hasCommand) {
        output.WriteMessage(2, field_names[0], Command);
      }
      if (hasResponse) {
        output.WriteMessage(3, field_names[3], Response);
      }
      if (hasCommandType) {
        output.WriteEnum(4, field_names[1], (int) CommandType, CommandType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, RequestId);
      }
      if (hasCommand) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Command);
      }
      if (hasResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Response);
      }
      if (hasCommandType) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) CommandType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CommandBase ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CommandBase ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CommandBase ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CommandBase ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CommandBase ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CommandBase ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CommandBase ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CommandBase ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CommandBase ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CommandBase ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CommandBase MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CommandBase prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CommandBase, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CommandBase cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CommandBase result;
      
      private CommandBase PrepareBuilder() {
        if (resultIsReadOnly) {
          CommandBase original = result;
          result = new CommandBase();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CommandBase MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.Descriptor; }
      }
      
      public override CommandBase DefaultInstanceForType {
        get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.DefaultInstance; }
      }
      
      public override CommandBase BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CommandBase) {
          return MergeFrom((CommandBase) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CommandBase other) {
        if (other == global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasCommand) {
          MergeCommand(other.Command);
        }
        if (other.HasResponse) {
          MergeResponse(other.Response);
        }
        if (other.HasCommandType) {
          CommandType = other.CommandType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandBaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandBaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRequestId = input.ReadInt64(ref result.requestId_);
              break;
            }
            case 18: {
              global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Builder subBuilder = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.CreateBuilder();
              if (result.hasCommand) {
                subBuilder.MergeFrom(Command);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Command = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.Builder subBuilder = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.CreateBuilder();
              if (result.hasResponse) {
                subBuilder.MergeFrom(Response);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Response = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.commandType_, out unknown)) {
                result.hasCommandType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRequestId {
        get { return result.hasRequestId; }
      }
      public long RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(long value) {
        PrepareBuilder();
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        PrepareBuilder();
        result.hasRequestId = false;
        result.requestId_ = 0L;
        return this;
      }
      
      public bool HasCommand {
       get { return result.hasCommand; }
      }
      public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder SetCommand(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCommand(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCommand &&
            result.command_ != global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.DefaultInstance) {
            result.command_ = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementCommand.CreateBuilder(result.command_).MergeFrom(value).BuildPartial();
        } else {
          result.command_ = value;
        }
        result.hasCommand = true;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = null;
        return this;
      }
      
      public bool HasResponse {
       get { return result.hasResponse; }
      }
      public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder SetResponse(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponse(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResponse &&
            result.response_ != global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.DefaultInstance) {
            result.response_ = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.CreateBuilder(result.response_).MergeFrom(value).BuildPartial();
        } else {
          result.response_ = value;
        }
        result.hasResponse = true;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = null;
        return this;
      }
      
      public bool HasCommandType {
       get { return result.hasCommandType; }
      }
      public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.Types.CommandType CommandType {
        get { return result.CommandType; }
        set { SetCommandType(value); }
      }
      public Builder SetCommandType(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.Types.CommandType value) {
        PrepareBuilder();
        result.hasCommandType = true;
        result.commandType_ = value;
        return this;
      }
      public Builder ClearCommandType() {
        PrepareBuilder();
        result.hasCommandType = false;
        result.commandType_ = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.CommandBase.Types.CommandType.COMMAND;
        return this;
      }
    }
    static CommandBase() {
      object.ReferenceEquals(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.CommandBase.Descriptor, null);
>>>>>>> Stashed changes
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
