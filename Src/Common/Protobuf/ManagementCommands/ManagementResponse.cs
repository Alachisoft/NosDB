// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

<<<<<<< Updated upstream
// Generated from: ManagementResponse.proto
// Note: requires additional types generated from: Exception.proto
namespace Alachisoft.NosDB.Common.Protobuf.ManagementCommands
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"ManagementResponse")]
  public partial class ManagementResponse : global::ProtoBuf.IExtensible
  {
    public ManagementResponse() {}
=======
using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Alachisoft.NoSDB.Common.Protobuf.ManagementCommands {
  
  namespace Proto {
>>>>>>> Stashed changes
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class ManagementResponse {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse, global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.Builder> internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementResponse__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ManagementResponse() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChhNYW5hZ2VtZW50UmVzcG9uc2UucHJvdG8SM0FsYWNoaXNvZnQuTm9TREIu", 
              "Q29tbW9uLlByb3RvYnVmLk1hbmFnZW1lbnRDb21tYW5kcxoPRXhjZXB0aW9u", 
              "LnByb3RvIrIBChJNYW5hZ2VtZW50UmVzcG9uc2USEQoJcmVxdWVzdElkGAEg", 
              "ASgDElEKCWV4Y2VwdGlvbhgCIAEoCzI+LkFsYWNoaXNvZnQuTm9TREIuQ29t", 
              "bW9uLlByb3RvYnVmLk1hbmFnZW1lbnRDb21tYW5kcy5FeGNlcHRpb24SDwoH", 
              "dmVyc2lvbhgDIAEoBRIRCglyZXR1cm5WYWwYBCABKAwSEgoKbWV0aG9kTmFt", 
              "ZRgFIAEoCUJCCiRjb20uYWxhY2hpc29mdC5ub3NkYi5jb21tb24ucHJvdG9i", 
            "dWZCGk1hbmFnZW1lbnRSZXNwb25zZVByb3RvY29s"));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementResponse__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse, global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.Builder>(internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementResponse__Descriptor,
                  new string[] { "RequestId", "Exception", "Version", "ReturnVal", "MethodName", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.Exception.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
<<<<<<< Updated upstream

    private Alachisoft.NosDB.Common.Protobuf.ManagementCommands.Exception _exception = null;
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"exception", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue(null)]
    public Alachisoft.NosDB.Common.Protobuf.ManagementCommands.Exception exception
    {
      get { return _exception; }
      set { _exception = value; }
=======
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ManagementResponse : pb::GeneratedMessage<ManagementResponse, ManagementResponse.Builder> {
    private ManagementResponse() { }
    private static readonly ManagementResponse defaultInstance = new ManagementResponse().MakeReadOnly();
    private static readonly string[] _managementResponseFieldNames = new string[] { "exception", "methodName", "requestId", "returnVal", "version" };
    private static readonly uint[] _managementResponseFieldTags = new uint[] { 18, 42, 8, 34, 24 };
    public static ManagementResponse DefaultInstance {
      get { return defaultInstance; }
>>>>>>> Stashed changes
    }
    
    public override ManagementResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ManagementResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.ManagementResponse.internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ManagementResponse, ManagementResponse.Builder> InternalFieldAccessors {
      get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.ManagementResponse.internal__static_Alachisoft_NoSDB_Common_Protobuf_ManagementCommands_ManagementResponse__FieldAccessorTable; }
    }
    
    public const int RequestIdFieldNumber = 1;
    private bool hasRequestId;
    private long requestId_;
    public bool HasRequestId {
      get { return hasRequestId; }
    }
    public long RequestId {
      get { return requestId_; }
    }
    
    public const int ExceptionFieldNumber = 2;
    private bool hasException;
    private global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception exception_;
    public bool HasException {
      get { return hasException; }
    }
    public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception Exception {
      get { return exception_ ?? global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.DefaultInstance; }
    }
    
    public const int VersionFieldNumber = 3;
    private bool hasVersion;
    private int version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int ReturnValFieldNumber = 4;
    private bool hasReturnVal;
    private pb::ByteString returnVal_ = pb::ByteString.Empty;
    public bool HasReturnVal {
      get { return hasReturnVal; }
    }
    public pb::ByteString ReturnVal {
      get { return returnVal_; }
    }
    
    public const int MethodNameFieldNumber = 5;
    private bool hasMethodName;
    private string methodName_ = "";
    public bool HasMethodName {
      get { return hasMethodName; }
    }
    public string MethodName {
      get { return methodName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _managementResponseFieldNames;
      if (hasRequestId) {
        output.WriteInt64(1, field_names[2], RequestId);
      }
      if (hasException) {
        output.WriteMessage(2, field_names[0], Exception);
      }
      if (hasVersion) {
        output.WriteInt32(3, field_names[4], Version);
      }
      if (hasReturnVal) {
        output.WriteBytes(4, field_names[3], ReturnVal);
      }
      if (hasMethodName) {
        output.WriteString(5, field_names[1], MethodName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, RequestId);
      }
      if (hasException) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Exception);
      }
      if (hasVersion) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Version);
      }
      if (hasReturnVal) {
        size += pb::CodedOutputStream.ComputeBytesSize(4, ReturnVal);
      }
      if (hasMethodName) {
        size += pb::CodedOutputStream.ComputeStringSize(5, MethodName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ManagementResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ManagementResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ManagementResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ManagementResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ManagementResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ManagementResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ManagementResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ManagementResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ManagementResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ManagementResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ManagementResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ManagementResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ManagementResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ManagementResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ManagementResponse result;
      
      private ManagementResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ManagementResponse original = result;
          result = new ManagementResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ManagementResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.Descriptor; }
      }
      
      public override ManagementResponse DefaultInstanceForType {
        get { return global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.DefaultInstance; }
      }
      
      public override ManagementResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ManagementResponse) {
          return MergeFrom((ManagementResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ManagementResponse other) {
        if (other == global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.ManagementResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasException) {
          MergeException(other.Exception);
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasReturnVal) {
          ReturnVal = other.ReturnVal;
        }
        if (other.HasMethodName) {
          MethodName = other.MethodName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_managementResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _managementResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRequestId = input.ReadInt64(ref result.requestId_);
              break;
            }
            case 18: {
              global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Builder subBuilder = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.CreateBuilder();
              if (result.hasException) {
                subBuilder.MergeFrom(Exception);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Exception = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 34: {
              result.hasReturnVal = input.ReadBytes(ref result.returnVal_);
              break;
            }
            case 42: {
              result.hasMethodName = input.ReadString(ref result.methodName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRequestId {
        get { return result.hasRequestId; }
      }
      public long RequestId {
        get { return result.RequestId; }
        set { SetRequestId(value); }
      }
      public Builder SetRequestId(long value) {
        PrepareBuilder();
        result.hasRequestId = true;
        result.requestId_ = value;
        return this;
      }
      public Builder ClearRequestId() {
        PrepareBuilder();
        result.hasRequestId = false;
        result.requestId_ = 0L;
        return this;
      }
      
      public bool HasException {
       get { return result.hasException; }
      }
      public global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception Exception {
        get { return result.Exception; }
        set { SetException(value); }
      }
      public Builder SetException(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasException = true;
        result.exception_ = value;
        return this;
      }
      public Builder SetException(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasException = true;
        result.exception_ = builderForValue.Build();
        return this;
      }
      public Builder MergeException(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasException &&
            result.exception_ != global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.DefaultInstance) {
            result.exception_ = global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Exception.CreateBuilder(result.exception_).MergeFrom(value).BuildPartial();
        } else {
          result.exception_ = value;
        }
        result.hasException = true;
        return this;
      }
      public Builder ClearException() {
        PrepareBuilder();
        result.hasException = false;
        result.exception_ = null;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasReturnVal {
        get { return result.hasReturnVal; }
      }
      public pb::ByteString ReturnVal {
        get { return result.ReturnVal; }
        set { SetReturnVal(value); }
      }
      public Builder SetReturnVal(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReturnVal = true;
        result.returnVal_ = value;
        return this;
      }
      public Builder ClearReturnVal() {
        PrepareBuilder();
        result.hasReturnVal = false;
        result.returnVal_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasMethodName {
        get { return result.hasMethodName; }
      }
      public string MethodName {
        get { return result.MethodName; }
        set { SetMethodName(value); }
      }
      public Builder SetMethodName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethodName = true;
        result.methodName_ = value;
        return this;
      }
      public Builder ClearMethodName() {
        PrepareBuilder();
        result.hasMethodName = false;
        result.methodName_ = "";
        return this;
      }
    }
    static ManagementResponse() {
      object.ReferenceEquals(global::Alachisoft.NoSDB.Common.Protobuf.ManagementCommands.Proto.ManagementResponse.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
